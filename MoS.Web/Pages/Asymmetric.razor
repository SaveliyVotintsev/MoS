@page "/asymmetric"

<MudText Color="Color.Error">@_errorMessage</MudText>

<MudTabs>
    <MudTabPanel Text="Ключи">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField FullWidth @bind-Value="PrimeP" Label="Простое число P" Variant="Variant.Filled" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField FullWidth @bind-Value="PrimeQ" Label="Простое число Q" Variant="Variant.Filled" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudStack>
                    <MudSlider @bind-Value="KMin" Min="1" Max="100" Color="Color.Error">Минимальное k: @KMin.ToString()</MudSlider>
                    <MudSlider @bind-Value="KMax" Min="1" Max="100" Color="Color.Info">Максимальное k: @KMax.ToString()</MudSlider>
                </MudStack>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudStack>
                    <MudSlider @bind-Value="EMin" Min="3" Max="99" Step="2" Color="Color.Error">Минимальное e: @EMin.ToString()</MudSlider>
                    <MudSlider @bind-Value="EMax" Min="3" Max="99" Step="2" Color="Color.Info">Максимальное e: @EMax.ToString()</MudSlider>
                </MudStack>
            </MudItem>
        </MudGrid>

        <MudButton OnClick="CalculateKeys" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Нажми</MudButton>

        <MudProgressLinear Value="@_progress" Buffer="true" Color="Color.Success" Class="my-2" />

        <MudTable Items="_results" Striped Breakpoint="Breakpoint.None" FixedHeader SortLabel="Sort By">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<KeyResult, object>(x => x.Modulus)">Modulus (n)</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<KeyResult, object>(x => x.Phi)">Phi (φ)</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<KeyResult, object>(x => x.D)">d</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<KeyResult, object>(x => x.PublicKey)">e</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<KeyResult, object>(x => x.K)">k</MudTableSortLabel>
                </MudTh>
                <MudTh>Открытый ключ</MudTh>
                <MudTh>Закрытый ключ</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Modulus (n)">@context.Modulus</MudTd>
                <MudTd DataLabel="Phi (φ)">@context.Phi</MudTd>
                <MudTd DataLabel="D">@context.D</MudTd>
                <MudTd DataLabel="e">@context.PublicKey</MudTd>
                <MudTd DataLabel="k">@context.K</MudTd>
                <MudTd DataLabel="Открытый ключ">@("{ " + context.Modulus + ", " + context.PublicKey + " }")</MudTd>
                <MudTd DataLabel="Закрытый ключ">@("{ " + context.Modulus + ", " + context.PrivateKey + " }")</MudTd>
            </RowTemplate>
        </MudTable>
        <MudExpansionPanel Text="Простые числа">
            <pre>
2	3	5	7	11	13
17	19	23	29	31	37
41	43	47	53	59	61
67	71	73	79	83	89
97	101	103	107	109	113
127	131	137	139	149	151
157	163	167	173	179	181
191	193	197	199	211	223
227	229	233	239	241	251
257	263	269	271	277	281
283	293	307	311	313	317
331	337	347	349	353	359
367	373	379	383	389	397
401	409	419	421	431	433
439	443	449	457	461	463
467	479	487	491	499	503
509	521	523	541	547	557
563	569	571	577	587	593
599	601	607	613	617	619
631	641	643	647	653	659
661	673	677	683	691	701
709	719	727	733	739	743
751	757	761	769	773	787
797	809	811	821	823	827
829	839	853	857	859	863
877	881	883	887	907	911
919	929	937	941	947	953
967	971	977	983	991	997
</pre>
        </MudExpansionPanel>
    </MudTabPanel>

    <MudTabPanel Text="Шифрование/Дешифрование">
        <MudGrid>
            <MudItem xs="12">
                <MudTextField FullWidth @bind-Value="PublicKeyModulus" Label="Modulus (Public Key)" Variant="Variant.Filled" />
                <MudTextField FullWidth @bind-Value="PublicKeyExponent" Label="Exponent (Public Key)" Variant="Variant.Filled" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField FullWidth @bind-Value="PrivateKeyModulus" Label="Modulus (Private Key)" Variant="Variant.Filled" />
                <MudTextField FullWidth @bind-Value="PrivateKeyExponent" Label="Exponent (Private Key)" Variant="Variant.Filled" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField FullWidth @bind-Value="InputText" Label="Число для шифрования/дешифрования" Variant="Variant.Filled" />
            </MudItem>
            <MudItem xs="12">
                <MudButton OnClick="Encrypt" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Зашифровать</MudButton>
                <MudButton OnClick="Decrypt" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-4">Расшифровать</MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudTextField FullWidth @bind-Value="EncryptedText" Label="Зашифрованные число" Variant="Variant.Filled" ReadOnly />
            </MudItem>
            <MudItem xs="12">
                <MudTextField FullWidth @bind-Value="DecryptedText" Label="Расшифрованное число" Variant="Variant.Filled" ReadOnly />
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code
{
    public string PublicKeyModulus { get; set; } = "667";
    public string PublicKeyExponent { get; set; } = "9";
    public string PrivateKeyModulus { get; set; } = "667";
    public string PrivateKeyExponent { get; set; } = "137";
    private string InputText { get; set; } = string.Empty;
    private string EncryptedText { get; set; } = string.Empty;
    private string DecryptedText { get; set; } = string.Empty;

    public void Decrypt()
    {
        try
        {
            if (!BigInteger.TryParse(PrivateKeyModulus, out BigInteger modulus) || !BigInteger.TryParse(PrivateKeyExponent, out BigInteger exponent))
            {
                _errorMessage = "Invalid public key.";
                return;
            }

            BigInteger.TryParse(InputText, out BigInteger plaintextInt);
            BigInteger encrypted = BigInteger.ModPow(plaintextInt, exponent, modulus);
            DecryptedText = encrypted.ToString();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error in encryption: {ex.Message}";
        }
    }

    public void Encrypt()
    {
        try
        {
            if (!BigInteger.TryParse(PublicKeyModulus, out BigInteger modulus) || !BigInteger.TryParse(PublicKeyExponent, out BigInteger exponent))
            {
                _errorMessage = "Invalid public key.";
                return;
            }

            BigInteger.TryParse(InputText, out BigInteger plaintextInt);
            BigInteger encrypted = BigInteger.ModPow(plaintextInt, exponent, modulus);
            EncryptedText = encrypted.ToString();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error in encryption: {ex.Message}";
        }
    }
}
